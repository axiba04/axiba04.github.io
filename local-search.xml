<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>笔记本安装openwrt做旁路由</title>
    <link href="/2021/12/26/%E7%AC%94%E8%AE%B0%E6%9C%AC%E5%AE%89%E8%A3%85openwrt%E5%81%9A%E6%97%81%E8%B7%AF%E7%94%B1/"/>
    <url>/2021/12/26/%E7%AC%94%E8%AE%B0%E6%9C%AC%E5%AE%89%E8%A3%85openwrt%E5%81%9A%E6%97%81%E8%B7%AF%E7%94%B1/</url>
    
    <content type="html"><![CDATA[<h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>手里闲置了一台华硕FL8000u笔记本，配置拿来安装openwrt做旁路由还是很舒服的，因为只有一个2.5G网口，所以拿来做主路由不太合适（应该可以在无线网卡那里再装一个minipcie转2.5G网口的转接头【minipcie i210（intel网卡比较好）】</p><p>准备工作：</p><ol><li><p>一个U盘，容量不要太小，8g往上吧，做成启动盘，将openwrt系统安装到这里</p></li><li><p>openwrt镜像</p></li><li><p>rufus工具，用来将镜像写入到U盘中</p></li><li><p>一台笔记本</p></li></ol><h3 id="一-制作启动盘"><a href="#一-制作启动盘" class="headerlink" title="一. 制作启动盘"></a>一. 制作启动盘</h3><ol><li><p>将下载好的openwrt镜像通过rufus镜像写入到U盘里</p><p>ps：确保你的U盘无重要资料（尽量先进行格式化处理）</p></li><li><p>openwrt的镜像一般有两种</p><ul><li>一种是combined格式，兼容性更强</li><li>一种是efi格式，更新一点，但是对老旧笔记本不太友好，</li></ul><p>我用的华硕FL8000u笔记本支持UEFI启动，所以使用了efi格式，这样U盘可以直接被电脑识别，然后在BIOS启动项里进行更改，</p><p>combined格式也可以使用，但是需要对BIOS进行设置：</p><p>1、进入BIOS后，切换到security选项,把Secure Boot Control (安全启动控制)默认enabled改成disabled，关闭这个安全启动。</p><p>2、切换到BOOT选项,把Launch CSM (兼容模式)默认disabled改成enabled，开启兼容模式。</p><p>3、开启兼容模式后，按F10保存设置，开机按ESC选中自己的U盘启动盘作为启动项。</p></li></ol><h3 id="二-对系统进行配置"><a href="#二-对系统进行配置" class="headerlink" title="二.对系统进行配置"></a>二.对系统进行配置</h3><p>进入到openwrt的控制界面后，使用命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">vi /etc/onfig/network<br></code></pre></td></tr></table></figure><p>将lan口的访问的ip地址，改为和主路由同网段的ip，比如我的主路由为小米ax3600,访问ip为192.168.31.1，我把openwrt的ip设为了192.168.32.2。</p><p>因为是作为旁路由使用，所以需要关闭旁路由的dhcp功能，防止与主路由的dhcp功能发生冲突。</p><p>使用命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi /etc/onfig/dhcp<br></code></pre></td></tr></table></figure><p>在lan处添加如下一行代码：</p><p>option ignore ‘1’</p><p>完成后使用命令<code>reboot</code>重启openwrt系统。</p><p>使用另一台与该旁路由同网段的设备访问192.168.31.2，进入openwrt的后台管理界面输入密码（一般下载镜像时会告知密码）</p><p>在网络下的接口菜单中，如下图所示对lan口点击修改</p><p><img src="https://java01-1307122583.cos.ap-nanjing.myqcloud.com/img/202202152236045.png" alt="image-20220215223647015"></p><p>将网关设置为主路由的地址：</p><p><img src="https://java01-1307122583.cos.ap-nanjing.myqcloud.com/img/202202152238500.png" alt="image-20220215223812485"></p><p>在物理设置中关闭该选项<img src="https://java01-1307122583.cos.ap-nanjing.myqcloud.com/img/202202152239104.png" alt="image-20220215223917082"></p><p>由于小米路由器的原因需要在，网络-防火墙-自定义规则中，添加下面一行代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">iptables -t nat -<span class="hljs-selector-tag">I</span> POSTROUTING -j MASQUERADE<br></code></pre></td></tr></table></figure><p>完成设置以后，可以发现通过旁路由可以正常的上网了。</p><p>可以自己配置一下openwrt的一些服务功能，来满足自己的需要。</p>]]></content>
    
    
    
    <tags>
      
      <tag>openwrt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>随手记知识点</title>
    <link href="/2021/10/05/%E9%9A%8F%E6%89%8B%E8%AE%B0/"/>
    <url>/2021/10/05/%E9%9A%8F%E6%89%8B%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="node-js"><a href="#node-js" class="headerlink" title="node.js"></a>node.js</h1><h2 id="卸载："><a href="#卸载：" class="headerlink" title="卸载："></a>卸载：</h2><ol><li><p>从卸载程序卸载程序和功能。</p></li><li><p>重新启动（或者您可能会从任务管理器中杀死所有与节点相关的进程）。</p></li><li><p>寻找这些文件夹并删除它们（及其内容）（如果还有）。根据您安装的版本，UAC设置和CPU架构，这些可能或可能不存在：<br> C:\Program Files (x86)\Nodejs<br> C:\Program Files\Nodejs<br> C:\Users{User}\AppData\Roaming\npm（或%appdata%\npm）<br> C:\Users{User}\AppData\Roaming\npm-cache（或%appdata%\npm-    cache）<br> 删除C:\Users{User}下的**.npmc**文件</p></li><li><p>检查您的%PATH%环境变量以确保没有引用Nodejs或npm存在。</p></li></ol><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>⚠注意:cmd用管理员模式打开，不然使用npm安装会报错</p><ol><li>选好安装位置，一路next，最后的不需要点</li><li>在cmd中使用<code>node -v</code>和<code>npm -v</code>查看安装版本</li><li>在安装目录下新建两个文件夹<code>node_cache</code>和<code>node_global</code><br> 在cmd窗口中使用以下两个命令：<ul><li><code>npm config set cache &quot;D:\ProgramFiles\nodejs\node_cache&quot;</code></li><li><code>npm config set prefix &quot;D:\ProgramFiles\nodejs\node_global&quot;</code></li></ul></li><li>输入命令 <code>npm config set registry=http://registry.npm.taobao.org</code> 配置镜像站</li><li>使用命令<code>npm install -g vue</code>安装vue</li><li>配置环境变量：<ul><li>用户变量中配置PATH：<br>D:\ProgramFiles\nodejs\node_global</li><li>系统变量配置NODE_PATH：<br>D:\ProgramFiles\nodejs\node_global\node_modules</li><li>系统变量配置PATH：<br>%NODE_PATH%</li></ul></li><li>使用命令node然后再使用require(‘vue’)测试是否配置成功</li></ol><h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h2 id="docker安装mysql"><a href="#docker安装mysql" class="headerlink" title="docker安装mysql"></a>docker安装mysql</h2><ol><li>创建MySQL容器，并启动MySQL</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs powershell">docker run <span class="hljs-literal">-p</span> <span class="hljs-number">3306</span>:<span class="hljs-number">3306</span> <span class="hljs-literal">--name</span> mysql \<br><span class="hljs-literal">-v</span> /mydata/mysql/log:/var/log/mysql \<br><span class="hljs-literal">-v</span> /mydata/mysql/<span class="hljs-keyword">data</span>:/var/lib/mysql \<br><span class="hljs-literal">-v</span> /mydata/mysql/conf:/etc/mysql \<br><span class="hljs-literal">-e</span> MYSQL_ROOT_PASSWORD=root \<br><span class="hljs-literal">-d</span> mysql:<span class="hljs-number">5.7</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell">docker run <span class="hljs-literal">-p</span> <span class="hljs-number">3306</span>:<span class="hljs-number">3306</span> <span class="hljs-literal">--name</span> mysql \ <span class="hljs-comment">#创建容器,给容器起名mysql,并将容器的3306端口映射到主机的3306端口</span><br><span class="hljs-literal">-v</span> /mydata/mysql/log:/var/log/mysql \ <span class="hljs-comment">#将日志文件挂载到主机</span><br><span class="hljs-literal">-v</span> /mydata/mysql/<span class="hljs-keyword">data</span>:/var/lib/mysql \ <span class="hljs-comment">#将数据目录挂载到主机</span><br><span class="hljs-literal">-v</span> /mydata/mysql/conf:/etc/mysql \ <span class="hljs-comment">#将配置文件挂载到主机</span><br><span class="hljs-literal">-e</span> MYSQL_ROOT_PASSWORD=root \ <span class="hljs-comment">#设置MySQL的root账户的密码</span><br><span class="hljs-literal">-d</span> mysql:<span class="hljs-number">5.7</span> <span class="hljs-comment">#使用的mysql的镜像版本</span><br></code></pre></td></tr></table></figure><ol start="2"><li>进入MySQL的Docker容器内部命令</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">docker exec <span class="hljs-literal">-it</span> mysql bash <span class="hljs-comment">#bash为进入容器后执行的的命令,bash是一个linux的终端命令</span><br></code></pre></td></tr></table></figure><ol start="3"><li>创建并配置MySQL的配置文件</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">vi /mydata/mysql/conf/my.cnf<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">#mysql配置文件内容</span><br>[<span class="hljs-type">client</span>]<br>default<span class="hljs-literal">-character-set</span>=utf8<br><br>[<span class="hljs-type">mysql</span>]<br>default<span class="hljs-literal">-character-set</span>=utf8<br><br>[<span class="hljs-type">mysqld</span>]<br>init_connect=<span class="hljs-string">&#x27;SET collation_connection = utf8_unicode_ci&#x27;</span><br>init_connect=<span class="hljs-string">&#x27;SET NAMES utf8&#x27;</span><br>character<span class="hljs-literal">-set-server</span>=utf8<br>collation<span class="hljs-literal">-server</span>=utf8_unicode_ci<br><span class="hljs-built_in">skip-character</span><span class="hljs-literal">-set-client-handshake</span><br><span class="hljs-built_in">skip-name</span><span class="hljs-literal">-resolve</span><br></code></pre></td></tr></table></figure><ol start="4"><li>设置MySQL自动启动</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">docker update mysql <span class="hljs-literal">--restart</span>=always<br></code></pre></td></tr></table></figure><h2 id="MySQL设置主从复制"><a href="#MySQL设置主从复制" class="headerlink" title="MySQL设置主从复制"></a>MySQL设置主从复制</h2><p><a href="https://www.jianshu.com/p/ab20e835a73f">基于Docker的《MySQL主从复制搭建</a></p><h3 id="master"><a href="#master" class="headerlink" title="master"></a>master</h3><ol><li>在配置文件中配置：</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">mysqld</span>]<br><span class="hljs-comment">## 设置server_id，一般设置为IP，同一局域网内注意要唯一</span><br>server_id=<span class="hljs-number">1</span><br><span class="hljs-comment">## 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步）</span><br>binlog<span class="hljs-literal">-ignore-db</span>=mysql  <br><span class="hljs-comment">## 开启二进制日志功能，可以随便取，最好有含义（关键就是这里了）</span><br>log<span class="hljs-literal">-bin</span>=mysqlbin<br><span class="hljs-comment">## 为每个session 分配的内存，在事务过程中用来存储二进制日志的缓存</span><br>binlog_cache_size=<span class="hljs-number">1</span>M  <br><span class="hljs-comment">## 主从复制的格式（mixed,statement,row，默认格式是statement）</span><br>binlog_format=mixed  <br><span class="hljs-comment">## 二进制日志自动删除/过期的天数。默认值为0，表示不自动删除。</span><br>expire_logs_days=<span class="hljs-number">7</span>  <br><span class="hljs-comment">## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。</span><br><span class="hljs-comment">## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致</span><br>slave_skip_errors=<span class="hljs-number">1062</span>  <br></code></pre></td></tr></table></figure><ol start="2"><li><p>重启docker容器</p></li><li><p>创建同步数据的账户，并且进行授权操作</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">grant replication slave on *.* to &#x27;root&#x27;@&#x27;192.168.2.129&#x27; identified by &#x27;root&#x27;;   <br><br>flush privileges;<br></code></pre></td></tr></table></figure><ol start="4"><li>查看master状态</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show master status;<br></code></pre></td></tr></table></figure><p>   <img src="https://java01-1307122583.cos.ap-nanjing.myqcloud.com/img/image-20211214200332730.png"></p><p>字段含义：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">File : 从哪个日志文件开始推送日志文件 <br>Position ： 从哪个位置开始推送日志<br>Binlog_Ignore_DB : 指定不需要同步的数据库<br></code></pre></td></tr></table></figure><h3 id="slave"><a href="#slave" class="headerlink" title="slave"></a>slave</h3><p>1）在 slave 端配置文件中，配置如下内容：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#mysql服务端ID,唯一</span><br><span class="hljs-attr">server-id</span>=<span class="hljs-string">2</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#指定binlog日志</span><br><span class="hljs-attr">log-bin</span>=<span class="hljs-string">mysqlbin</span><br></code></pre></td></tr></table></figure><p>2） 执行完毕之后，需要重启Mysql：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">service mysql restart；<br></code></pre></td></tr></table></figure><p>3） 执行如下指令 ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">change master <span class="hljs-keyword">to</span> master_host<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;192.168.2.128&#x27;</span>, master_user<span class="hljs-operator">=</span><span class="hljs-string">&#x27;root&#x27;</span>, master_password<span class="hljs-operator">=</span><span class="hljs-string">&#x27;root&#x27;</span>, master_log_file<span class="hljs-operator">=</span><span class="hljs-string">&#x27;mysqlbin.000001&#x27;</span>, master_log_pos<span class="hljs-operator">=</span><span class="hljs-number">601</span>;<br></code></pre></td></tr></table></figure><p>指定当前从库对应的主库的IP地址，用户名，密码，从哪个日志文件开始的那个位置开始同步推送日志。</p><p>4） 开启同步操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">start slave;<br><br>show slave status;<br></code></pre></td></tr></table></figure><p><img src="https://java01-1307122583.cos.ap-nanjing.myqcloud.com/img/202112121831337.png"></p><p>遇到的错误：</p><ul><li><p>因为是直接克隆的linux，所以导致问题：uuid相同，而导致触发此异常</p></li><li><p>服务器背景<br>只安装了一台linux又克隆了两台，一主三从 , 关键点就在于是克隆的，才导致了报Slave_IO_Running: NO<br>原因：mysql 有个uuid , 然而uuid 是唯一标识的，所以我克隆过来的uuid是一样的，只需要修改一下uuid 就ok了，找到auto.cnf 文件修改uuid</p></li><li><p>具体解决方案查询命令找此auto.cnf修改uuid即可</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs powershell">find / <span class="hljs-literal">-iname</span> <span class="hljs-string">&quot;auto.cnf&quot;</span><br><br>vim /<span class="hljs-keyword">data</span>/mysql/auto.cnf<br><br><span class="hljs-comment"># 原内容</span><br>[<span class="hljs-type">auto</span>]<br>server<span class="hljs-literal">-uuid</span>=<span class="hljs-number">64</span>cbb3d1<span class="hljs-literal">-e150-11eb-81a2-000c2972fe1f</span><br><br><span class="hljs-comment"># 调整后内容，自定义即可，把最后一位f替换为a</span><br>[<span class="hljs-type">auto</span>]<br>server<span class="hljs-literal">-uuid</span>=<span class="hljs-number">64</span>cbb3d1<span class="hljs-literal">-e150-11eb-81a2-000c2972fe1a</span><br></code></pre></td></tr></table></figure></li></ul><p>5） 停止同步操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">stop slave;<br></code></pre></td></tr></table></figure><h1 id="Ubuntu20-04安装docker"><a href="#Ubuntu20-04安装docker" class="headerlink" title="Ubuntu20.04安装docker"></a>Ubuntu20.04安装docker</h1><h2 id="一、更换国内软件源"><a href="#一、更换国内软件源" class="headerlink" title="一、更换国内软件源"></a>一、更换国内软件源</h2><ol><li>打开应用程序页面—&gt;软件和更新<br><img src="https://java01-1307122583.cos.ap-nanjing.myqcloud.com/img/202202041455493.png"></li><li>在打开页面的下拉框中，选中“其他站点”，点击“选择最佳服务器”<br><img src="https://java01-1307122583.cos.ap-nanjing.myqcloud.com/img/202202041455538.png"></li><li>在终端中输入以下命令</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get update<br><br></code></pre></td></tr></table></figure><p>没有错误则成功了。</p><h2 id="二、安装需要的包"><a href="#二、安装需要的包" class="headerlink" title="二、安装需要的包"></a>二、安装需要的包</h2><p>在终端输入命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install apt-transport-https ca-certificates software-properties-common curl<br></code></pre></td></tr></table></figure><p>没有错误则成功。</p><h2 id="三、添加-GPG-密钥，并添加-Docker-ce-软件源"><a href="#三、添加-GPG-密钥，并添加-Docker-ce-软件源" class="headerlink" title="三、添加 GPG 密钥，并添加 Docker-ce 软件源"></a>三、添加 GPG 密钥，并添加 <a href="https://so.csdn.net/so/search?q=Docker&spm=1001.2101.3001.7020">Docker</a>-ce 软件源</h2><p>官方的软件源（不推荐，很慢）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -fsSL https://download.docker.com/linux/ubuntu/gpg|sudo apt-key add -<br>sudo add-apt-repository <span class="hljs-string">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu <span class="hljs-subst">$(lsb_release -cs)</span> stable&quot;</span><br></code></pre></td></tr></table></figure><p>中国科技大学的 Docker-ce 源（其他源类似）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add -<br>sudo add-apt-repository <span class="hljs-string">&quot;deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu \</span><br><span class="hljs-string"><span class="hljs-subst">$(lsb_release -cs)</span> stable&quot;</span><br><span class="hljs-comment">#注意：添加错了可以用以下命令删除</span><br><span class="hljs-comment">#查询keyid,下图</span><br>sudo apt-key list<br><span class="hljs-comment">#keyid 就是90那一串</span><br>sudo apt-key del &lt;keyid&gt;<br><span class="hljs-comment">#加参数-r可以移除</span><br>sudo add-apt-repository -r <span class="hljs-string">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu <span class="hljs-subst">$(lsb_release -cs)</span> stable&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://java01-1307122583.cos.ap-nanjing.myqcloud.com/img/202202041455431.png"><br>更新软件包缓存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get update<br></code></pre></td></tr></table></figure><h2 id="四、安装-Docker-ce"><a href="#四、安装-Docker-ce" class="headerlink" title="四、安装 Docker-ce"></a>四、安装 Docker-ce</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install docker-ce<br></code></pre></td></tr></table></figure><h2 id="五、测试运行"><a href="#五、测试运行" class="headerlink" title="五、测试运行"></a>五、测试运行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo docker run hello-world<br></code></pre></td></tr></table></figure><p>显示如下就成功了<br><img src="https://java01-1307122583.cos.ap-nanjing.myqcloud.com/img/202202041455459.png"></p><h2 id="六、添加当前用户到-docker-用户组，可以不用-sudo-运行-docker"><a href="#六、添加当前用户到-docker-用户组，可以不用-sudo-运行-docker" class="headerlink" title="六、添加当前用户到 docker 用户组，可以不用 sudo 运行 docker"></a>六、添加当前用户到 docker 用户组，可以不用 sudo 运行 docker</h2><p>将当前用户添加到 docker 组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo gpasswd -a <span class="hljs-variable">$&#123;USER&#125;</span> docker<br></code></pre></td></tr></table></figure><p>重新登录或者用以下命令切换到docker组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">newgrp - docker<br></code></pre></td></tr></table></figure><p>重启docker服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo service docker restart<br></code></pre></td></tr></table></figure><p>不加sudo直接执行docker命令检查效果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker ps<br></code></pre></td></tr></table></figure><h1 id="Ubuntu20-04-安装-jdk8"><a href="#Ubuntu20-04-安装-jdk8" class="headerlink" title="Ubuntu20.04 安装 jdk8"></a>Ubuntu20.04 安装 jdk8</h1><p>下载对应的 jdk8</p><p>链接：<a href="https://pan.baidu.com/s/1gx5Gln0uIjqaHVTAkpPPrA">https://pan.baidu.com/s/1gx5Gln0uIjqaHVTAkpPPrA</a><br>提取码：0822 </p><p>在 ubuntu 中 新建 一个 jdk8 目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">mkdir jdk1<span class="hljs-number">.8</span><br></code></pre></td></tr></table></figure><p>解压</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">tar -zxvf jdk-8u311-linux-x64.tar.gz<br></code></pre></td></tr></table></figure><p>配置环境变量 （ 输入 vim &#x2F;etc&#x2F;profile 进行编辑 ）</p><p>在文件内容最后加入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">export JAVA_HOME=/usr/local/jdk1<span class="hljs-number">.8</span><br>export JRE_HOME=$&#123;JAVA_HOME&#125;/jre<br>export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib<br>export PATH=.:$&#123;JAVA_HOME&#125;/bin:$PATH<br></code></pre></td></tr></table></figure><p>使修改的配置立刻生效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">source /etc/profile <br></code></pre></td></tr></table></figure><p>检查是否安装成功</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">java -version<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>小知识点</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitHub或Gitee+Hexo+域名创建自己的博客</title>
    <link href="/2021/07/23/GitHub%E6%88%96Gitee+Hexo+%E5%9F%9F%E5%90%8D%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <url>/2021/07/23/GitHub%E6%88%96Gitee+Hexo+%E5%9F%9F%E5%90%8D%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h3><ul><li>注册好github账号（gitee账号需要实名认证才能使用gitee pages服务）</li><li>安装git</li><li>有一个已注册的域名</li></ul><h3 id="2-开始搭建博客"><a href="#2-开始搭建博客" class="headerlink" title="2. 开始搭建博客"></a>2. 开始搭建博客</h3><h4 id="1-安装node-js"><a href="#1-安装node-js" class="headerlink" title="1.安装node.js"></a>1.安装node.js</h4><p>⚠注意:cmd用管理员模式打开，不然使用npm安装会报错</p><ol><li>选好安装位置，一路next，最后的不需要点</li><li>在cmd中使用<code>node -v</code>和<code>npm -v</code>查看安装版本</li><li>在安装目录下新建两个文件夹<code>node_cache</code>和<code>node_global</code><br> 在cmd窗口中使用以下两个命令：<ul><li><code>npm config set cache &quot;D:\ProgramFiles\nodejs\node_cache&quot;</code></li><li><code>npm config set prefix &quot;D:\ProgramFiles\nodejs\node_global&quot;</code></li></ul></li><li>输入命令 <code>npm config set registry=http://registry.npm.taobao.org</code> 配置镜像站</li><li>使用命令<code>npm install -g vue</code>安装vue</li><li>配置环境变量：<ul><li>用户变量中配置PATH：<br>D:\ProgramFiles\nodejs\node_global</li><li>系统变量配置NODE_PATH：<br>D:\ProgramFiles\nodejs\node_global\node_modules</li><li>系统变量配置PATH：<br>%NODE_PATH%</li></ul></li><li>使用命令node然后再使用require(‘vue’)测试是否配置成功</li></ol><h4 id="2-安装Hexo"><a href="#2-安装Hexo" class="headerlink" title="2.安装Hexo"></a>2.安装Hexo</h4><ol><li><p>在安装之前，在GitHub上创立一个仓库，仓库名称为“你的用户名.github.io”</p></li><li><p>在仓库设置里面查看GitHub pages，如下图，即为成功</p><p><img src="https://java01-1307122583.cos.ap-nanjing.myqcloud.com/img/202202141034369.png" alt="image-20220214103428338"></p></li><li><p>接下来安装Hexo </p><ul><li><p>在D盘创建一个文件夹Blog，在Blog文件夹内，管理员运行CMD命令行窗口（因为我的node.js安装在了需要管理员权限的文件夹内），然后输入npm命令安装Hexo</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">npm install -g hexo-cli<br></code></pre></td></tr></table></figure></li><li><p>安装完成后，输入hexo init命令初始化博客</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo init<br></code></pre></td></tr></table></figure></li><li><p>然后输入hexo g静态部署</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g<br></code></pre></td></tr></table></figure></li><li><p>这时网页已经部署完成，输入hexo s命令可以查看：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo s<br></code></pre></td></tr></table></figure></li><li><p>浏览器输入<a href="https://localhost:4000就可以打开新部署的网页，然后Ctrl+c停止运行服务器">https://localhost:4000就可以打开新部署的网页，然后Ctrl+c停止运行服务器</a></p></li></ul></li></ol><h4 id="3-将Hexo部署到GitHub"><a href="#3-将Hexo部署到GitHub" class="headerlink" title="3.将Hexo部署到GitHub"></a>3.将Hexo部署到GitHub</h4><p>回到Blog文件夹内，编辑_config.yml文件</p><p>下滑到文件底部，填上如下内容：</p><p>远程URL为https：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">https://github.com/axiba04/axiba04.github.io.git</span>  <span class="hljs-comment">#你的仓库地址</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure><p>远程URL为SSH：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">git@github.com:axiba04/axiba04.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure><p>注意：使用SSH时，GIT要配置SSH公钥</p><ul><li>生成SSH公钥 <ul><li>ssh-keygen -t rsa </li><li>不断回车<ul><li>如果公钥已经存在，则自动覆盖</li></ul></li></ul></li><li>GitHub设置账户共公钥<ul><li>获取公钥<ul><li>cat ~&#x2F;.ssh&#x2F;id_rsa.pub</li></ul></li></ul></li></ul><p>然后回到Blog文件夹内，管理员运行CMD，安装Git部署命令插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>然后分别输入以下三条命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo clean   #清除缓存文件 db.json 和已生成的静态文件 public<br>hexo g       #生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)<br>hexo d       #自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)<br></code></pre></td></tr></table></figure><p>完成以后，打开浏览器，输入 <a href="https://fengye97.github.io/">https://xxx.github.io</a> 就可以打开你的网页了：</p><h4 id="4-绑定自己的域名"><a href="#4-绑定自己的域名" class="headerlink" title="4.绑定自己的域名"></a>4.绑定自己的域名</h4><ol><li><p>首先在Blog&#x2F;source文件夹内，创建一个CNAME文件，填写域名，比如我的域名：kaidione.cn</p></li><li><p>在域名解析台，添加两个记录</p><ul><li><img src="https://java01-1307122583.cos.ap-nanjing.myqcloud.com/img/202202152119678.png" alt="image-20220215211909637"></li><li><img src="https://java01-1307122583.cos.ap-nanjing.myqcloud.com/img/202202152121018.png" alt="image-20220215212144986"></li><li><img src="https://java01-1307122583.cos.ap-nanjing.myqcloud.com/img/202202152122381.png" alt="image-20220215212209361"></li></ul><p>然后使用命令重新部署博客，在github的仓库设置中找到github pages，如下如所示：</p><p><img src="https://java01-1307122583.cos.ap-nanjing.myqcloud.com/img/202202152124342.png" alt="image-20220215212409322"></p><p>即为成功，接下来就可以使用你设置的域名访问你自己的博客啦！</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>github</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>华硕笔记本设置通电自启</title>
    <link href="/2021/01/05/%E5%8D%8E%E7%A1%95%E7%AC%94%E8%AE%B0%E6%9C%AC%E8%AE%BE%E7%BD%AE%E9%80%9A%E7%94%B5%E8%87%AA%E5%90%AF/"/>
    <url>/2021/01/05/%E5%8D%8E%E7%A1%95%E7%AC%94%E8%AE%B0%E6%9C%AC%E8%AE%BE%E7%BD%AE%E9%80%9A%E7%94%B5%E8%87%AA%E5%90%AF/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>之前写过一篇笔记本装openwrt做旁路由的教程。出现了一个新的问题：当断电笔记本意外关机时，通电以后，无法自动启动，这样就很影响旁路由的正常使用。所以就折腾了一番，将我的华硕Fl8000u设置为通电启动。</p><p>当然，在台式电脑的主板bios中，是有设置通电自启的开关的。但是大部分笔记本都没有类似的选项。</p><p>实际上大多数笔记本BIOS厂商提供了State After G3的功能，他和台式机Power State After Power Off功能是一样的。在G3电源断开之后默认进入S5关机状态。只要我们找到这个选项，将其改为S0，即可做到让笔记不插电自动开机。</p><p>但是这些设置我们找不到，他们实际上是被OEM给隐藏了，只要我们想办法找到这些设置存储的位置，通过UEFI协议再对其进行修改，不用更改BIOS固件就可以直接修改这些隐藏的参数。</p><p>难点在于如何确定这些参数所对应的位置。因为每台电脑的BIOS都不尽相同，所以我们要提取BIOS并对其拆包、翻译，从而找到这个参数所在的位置。</p><p>所以需要对对自己的笔记本进行如下设置：</p><p>PS：本文所用到的软件链接：</p><p>链接：<a href="https://pan.baidu.com/s/1QFBE2NoCX7K0Fb2uejmD4A">https://pan.baidu.com/s/1QFBE2NoCX7K0Fb2uejmD4A</a><br>提取码：5e5t </p><h3 id="1-使用万能备份工具BIOS-Backup-TooKit来导出本机的BIOS固件到文件"><a href="#1-使用万能备份工具BIOS-Backup-TooKit来导出本机的BIOS固件到文件" class="headerlink" title="1.使用万能备份工具BIOS Backup TooKit来导出本机的BIOS固件到文件"></a>1.使用万能备份工具BIOS Backup TooKit来导出本机的BIOS固件到文件</h3><p><img src="https://java01-1307122583.cos.ap-nanjing.myqcloud.com/img/202202161522659.png"></p><p><strong>记得用管理员身份运行哦！（只要管理员的权限才能加载WinRing0驱动对BIOS FLASH进行读取）</strong> <img src="https://java01-1307122583.cos.ap-nanjing.myqcloud.com/img/202202161522697.png"></p><p> <strong>我的电脑是华硕的，识别不出来BIOS型号，就随便选一个最大的大小开始读取（反正后边是0x00都可以被忽略）</strong></p><p><img src="https://java01-1307122583.cos.ap-nanjing.myqcloud.com/img/202202161522672.png"></p><p><strong>读取完之后将文件保存</strong></p><p><img src="https://java01-1307122583.cos.ap-nanjing.myqcloud.com/img/202202161522663.png"></p><h3 id="2-使用UEFITool工具来对EFI-BIOS进行解包。"><a href="#2-使用UEFITool工具来对EFI-BIOS进行解包。" class="headerlink" title="2.使用UEFITool工具来对EFI BIOS进行解包。"></a>2.使用UEFITool工具来对EFI BIOS进行解包。</h3><p><img src="https://java01-1307122583.cos.ap-nanjing.myqcloud.com/img/202202161522670.png"></p><p><strong>Step:File-&gt;open image file[选择之前保存的文件]</strong></p><p><img src="https://java01-1307122583.cos.ap-nanjing.myqcloud.com/img/202202161522654.png"></p><p><img src="https://java01-1307122583.cos.ap-nanjing.myqcloud.com/img/202202161522946.png"></p><p><strong>打开之后：</strong></p><p><img src="https://java01-1307122583.cos.ap-nanjing.myqcloud.com/img/202202161522959.png"></p><p><strong>我们查找各个GUID里含有zip(<font color='red'>Lzma字样</font>&gt;)的段，这个段包含了BIOS Setup Utility（就是俗说的BIOS设置界面）的Dxe可执行文件。</strong></p><p><img src="https://java01-1307122583.cos.ap-nanjing.myqcloud.com/img/202202161522984.png"> <strong>我们最终要对他进行UEFI语言提取和翻译，来确定要修改的参数的对应地址。</strong></p><p><img src="https://java01-1307122583.cos.ap-nanjing.myqcloud.com/img/202202161522986.png"></p><p><strong>我们在PE32 image 段上点击右键-&gt;Extract as is…</strong></p><p><strong>选择保存的文件为：</strong> </p><p><img src="https://java01-1307122583.cos.ap-nanjing.myqcloud.com/img/202202161522981.png"></p><h3 id="3-使用IFR-Extractor工具来翻译取刚刚获取的Sct-Dxe-文件中的配置信息"><a href="#3-使用IFR-Extractor工具来翻译取刚刚获取的Sct-Dxe-文件中的配置信息" class="headerlink" title="3.使用IFR Extractor工具来翻译取刚刚获取的Sct(Dxe)文件中的配置信息"></a>3.使用IFR Extractor工具来翻译取刚刚获取的Sct(Dxe)文件中的配置信息</h3><p>选择sct(Dxe)之后，点击Extract开始解压</p><p><img src="https://java01-1307122583.cos.ap-nanjing.myqcloud.com/img/202202161522987.png"></p><p>将得到翻译后的TXT文件：</p><p><img src="https://java01-1307122583.cos.ap-nanjing.myqcloud.com/img/202202161522134.png" alt="img"></p><p>用记事本或是Vs code打开</p><p>在VS code中Ctrl+f（搜索关键词：State After）</p><p><img src="https://java01-1307122583.cos.ap-nanjing.myqcloud.com/img/202202161522267.png"></p><p><strong>记住其地址和相应的值。（别搞错了！否则电脑就废了！因为笔记本的BIOS参数是存储在主板Flash的NVRAM区里，不是台式机那种断电就丢的CMOS里，断电数据不丢失！无法放跳线恢复！）</strong></p><h3 id="4-使用-开源软件"><a href="#4-使用-开源软件" class="headerlink" title="4.使用 开源软件"></a>4.使用 开源软件</h3><p><a href="https://github.com/datasone/grub-mod-setup_var">https://github.com/datasone/grub-mod-setup_var</a></p><p><img src="https://java01-1307122583.cos.ap-nanjing.myqcloud.com/img/202202161522244.png"></p><p>接着是点击下载文件 </p><p> <img src="https://java01-1307122583.cos.ap-nanjing.myqcloud.com/img/202202161522247.png"></p><p>将该可执行文件下载到U盘中，在此之前要将U盘进行格式化（文件系统要选择FAT32）</p><p><img src="https://java01-1307122583.cos.ap-nanjing.myqcloud.com/img/202202161522259.png"></p><p>格式化后的结果：</p><p><img src="https://java01-1307122583.cos.ap-nanjing.myqcloud.com/img/202202161522303.png"></p><p> 将efi文件移动到U盘中</p><p><img src="https://java01-1307122583.cos.ap-nanjing.myqcloud.com/img/202202161522305.png"></p><p> PS:要进行以下改动，（新建文件夹，并且对efi文件进行改名操作）</p><p><img src="https://java01-1307122583.cos.ap-nanjing.myqcloud.com/img/202202161522473.png"></p><h3 id="5-引导efi文件"><a href="#5-引导efi文件" class="headerlink" title="5.引导efi文件"></a>5.引导efi文件</h3><p>（1）首先，我们要进行BIOS界面，secure boot-》disabled【这样我们才能引导一个没有签名的镜像】</p><p>（2）接着，我们就需要用启动菜单引导U盘</p><p>（3）输入setup_var 0x8e6 0</p><p>（4）结果：</p><p><img src="https://java01-1307122583.cos.ap-nanjing.myqcloud.com/img/202202161522668.png"></p><h3 id="6-接着，我们就可以尝试关机，插上电源来测试是否插电自启了"><a href="#6-接着，我们就可以尝试关机，插上电源来测试是否插电自启了" class="headerlink" title="6.接着，我们就可以尝试关机，插上电源来测试是否插电自启了!"></a>6.接着，我们就可以尝试关机，插上电源来测试是否插电自启了!</h3>]]></content>
    
    
    
    <tags>
      
      <tag>折腾系列</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
